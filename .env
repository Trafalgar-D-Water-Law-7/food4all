
TWILIO_SID=AC37693f00bce9f96c2197ffdfc02820d8
TWILIO_AUTH_TOKEN=2bbc897c079f93b4f67256e7e847ecca
TWILIO_PHONE_NUMBER=+17194224741


EMAIL=foodforallnp@gmail.com
PASSWORD=tqdn kwbw jbxs uesq 


ESEWA_MERCHANT_CODE=EPAYTEST
ESEWA_SECRET_KEY=8gBm/:&EnhH.1/q
ESEWA_GATEWAY_URL=https://rc-epay.esewa.com.np/api/epay/main/v2/form
ESEWA_SUCCESS_URL=http://localhost:3000/payment/success
ESEWA_FAILURE_URL=http://localhost:3000/payment/failure




// Registration flow
router.get("/create", (req, res) => res.render("create"));

router.post("/send-otp", async (req, res) => {
  const { email } = req.body;
  const existing = await Admin.findOne({ email: email.toLowerCase() });
  if (existing) {
    req.flash("error", "Admin already exists");
    return res.redirect("/admin/create");
  }

  const otp = Math.floor(100000 + Math.random() * 900000).toString();
  otpMap.set(email, otp);

  await transporter.sendMail({
    from: process.env.EMAIL,
    to: email,
    subject: "Admin OTP Verification",
    text: `Your OTP is: ${otp}`,
  });

  req.session.pendingAdminEmail = email;
  req.flash("success", "OTP sent to your email");
  res.redirect("/admin/verify-otp");
});

router.get("/verify-otp", (req, res) => {
  if (!req.session.pendingAdminEmail) {
    req.flash("error", "Start registration again");
    return res.redirect("/admin/create");
  }
  res.render("verify");
});

router.post("/verify-otp", (req, res) => {
  const { otp, password } = req.body;
  const email = req.session.pendingAdminEmail;

  if (otpMap.get(email) !== otp) {
    req.flash("error", "Invalid OTP");
    return res.redirect("/admin/verify-otp");
  }

  req.session.verifiedAdmin = { email, password };
  otpMap.delete(email);
  res.redirect("/admin/finalize");
});





router.get("/finalize", (req, res) => {
  if (!req.session.verifiedAdmin) {
    req.flash("error", "OTP not verified");
    return res.redirect("/admin/create");
  }
  res.render("finalize");
});

router.post("/finalize", async (req, res) => {
  const data = req.session.verifiedAdmin;
  if (!data) {
    req.flash("error", "Session expired");
    return res.redirect("/admin/create");
  }

  const hashedPassword = await bcrypt.hash(data.password, 10);
  const newAdmin = new Admin({ email: data.email.toLowerCase(), password: hashedPassword });

  try {
    await newAdmin.save();
    req.session.verifiedAdmin = null;
    req.session.pendingAdminEmail = null;
    req.flash("success", "Admin created successfully");
    res.redirect("/admin/login");
  } catch (err) {
    console.error(err);
    req.flash("error", "Error saving admin");
    res.redirect("/admin/create");
  }
});
