<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile | FoodShare</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <%- include('config/export')%>
    <style>
        .profile-header {
            background: linear-gradient(135deg, #2c3e50, #4ca1af);
            color: white;
            border-radius: 0 0 20px 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            padding: 100px 0 50px 0 !important;
        }
        
        .profile-img {
            width: 150px;
            height: 150px;
            object-fit: cover;
            border: 5px solid white;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }
        
        .nav-tabs .nav-link {
            color: #495057;
            font-weight: 500;
            border: none;
            padding: 12px 20px;
        }
        
        .nav-tabs .nav-link.active {
            color: #0d6efd;
            background-color: transparent;
            border-bottom: 3px solid #0d6efd;
        }
        
        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .badge-token {
            font-size: 0.85rem;
            letter-spacing: 1px;
        }
        
        .empty-state {
            padding: 40px 0;
            text-align: center;
            color: #6c757d;
        }
        
        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #dee2e6;
        }
    </style>
</head>

<body>
    <%- include('config/nav')%>

    <!-- Profile Header -->
    <div class="profile-header py-5 mb-5">
        <div class="container">
            <div class="row align-items-center py-4">
                <div class="col-md-2 text-center mb-4 mb-md-0">
                    <img src="/<%= user.photo %>" alt="Profile Photo" class="profile-img rounded-circle">
                </div>
                <div class="col-md-6">
                    <h1 class="h2 fw-bold"><%= user.name %></h1>
                    <p class="mb-1"><i class="bi bi-envelope me-2"></i> <%= user.email %></p>
                    <p class="mb-1"><i class="bi bi-telephone me-2"></i> <%= user.contact %></p>
                    <p class="mb-0"><i class="bi bi-heart me-2"></i> <%= user.donationCount %> donations made</p>
                </div>
                <div class="col-md-4 text-md-end mt-3 mt-md-0">
                    <button class="btn btn-light me-2" data-bs-toggle="modal" data-bs-target="#editProfileModal">
                        <i class="bi bi-pencil-square me-1"></i> Edit Profile
                    </button>
                    <a href="/users/donate" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-1"></i> Add Donation
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="container mb-5">
        <!-- Tab Navigation -->
        <ul class="nav nav-tabs mb-4" id="profileTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="claimed-tab" data-bs-toggle="tab" data-bs-target="#claimed" type="button" role="tab">
                    <i class="bi bi-basket me-1"></i> Claimed Food
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="donated-tab" data-bs-toggle="tab" data-bs-target="#donated" type="button" role="tab">
                    <i class="bi bi-gift me-1"></i> My Donations
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="requests-tab" data-bs-toggle="tab" data-bs-target="#requests" type="button" role="tab">
                    <i class="bi bi-chat-left-text me-1"></i> Food Requests
                </button>
            </li>
        </ul>

        <!-- Tab Content -->
        <div class="tab-content" id="profileTabsContent">
            <!-- Claimed Food Tab -->
            <div class="tab-pane fade show active" id="claimed" role="tabpanel">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h3 class="h4">My Claimed Food</h3>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="text" id="searchClaimed" class="form-control" placeholder="Search claimed food...">
                            <button class="btn btn-outline-secondary" type="button">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <% if (claimedFood.length === 0) { %>
                    <div class="empty-state">
                        <i class="bi bi-basket"></i>
                        <h4 class="h5">No Claimed Food Yet</h4>
                        <p>You haven't claimed any food donations yet.</p>
                    </div>
                <% } else { %>
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                        <% claimedFood.forEach(food => { %>
                            <div class="col">
                                <div class="card h-100">
                                    <div class="card-header bg-success text-white">
                                        <h5 class="card-title mb-0"><%= food.name %></h5>
                                    </div>
                                    <div class="card-body">
                                        <p class="card-text">
                                            <strong>Claim Token:</strong>
                                            <span class="badge bg-danger badge-token"><%= food.claimedToken %></span>
                                        </p>
                                        <p class="card-text">
                                            <strong>Status:</strong>
                                            <span class="badge bg-<%= food.status === 'completed' ? 'success' : 'warning' %>">
                                                <%= food.status %>
                                            </span>
                                        </p>
                                    </div>
                                    <div class="card-footer bg-transparent">
                                        <a href="/food/<%= food._id %>" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-eye me-1"></i> View Details
                                        </a>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                <% } %>
            </div>

            <!-- Donated Food Tab -->
            <div class="tab-pane fade" id="donated" role="tabpanel">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h3 class="h4">My Donations</h3>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="text" id="searchDonated" class="form-control" placeholder="Search my donations...">
                            <button class="btn btn-outline-secondary" type="button">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <% if (donatedFoods.length === 0) { %>
                    <div class="empty-state">
                        <i class="bi bi-gift"></i>
                        <h4 class="h5">No Donations Yet</h4>
                        <p>You haven't donated any food yet.</p>
                        <a href="/users/donate" class="btn btn-primary">Make Your First Donation</a>
                    </div>
                <% } else { %>
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                        <% donatedFoods.forEach(food => { %>
                            <div class="col food-card" data-id="<%= food._id %>" data-name="<%= food.name.toLowerCase() %>" data-token="<%= food.claimedToken ? food.claimedToken.toLowerCase() : '' %>">
                                <div class="card h-100">
                                    <div class="card-header bg-primary text-white">
                                        <h5 class="card-title mb-0"><%= food.name %></h5>
                                    </div>
                                    <div class="card-body">
                                        <% if (food.claimedToken) { %>
                                            <p class="card-text">
                                                <strong>Claim Token:</strong>
                                                <span class="badge bg-danger badge-token"><%= food.claimedToken %></span>
                                            </p>
                                            <p class="card-text">
                                                <strong>Claimed By:</strong>
                                                <%= food.claimedBy ? food.claimedBy.name : 'Pending confirmation' %>
                                            </p>
                                        <% } else { %>
                                            <p class="card-text text-muted">Not yet claimed</p>
                                        <% } %>
                                    </div>
                                    <div class="card-footer bg-transparent d-flex justify-content-between">
                                        <a href="/food/<%= food._id %>" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-eye me-1"></i> View
                                        </a>
                                        <div style="margin-left: 2px;" >
                                            <% if (food.claimedBy && food.status !== 'completed') { %>
                                                <button class=" w-100 btn btn-sm btn-success confirm-pickup me-1" data-id="<%= food._id %>">
                                                    <i class="bi bi-check-circle me-1"></i> Confirm Pickup
                                                </button>
                                            <% } %>
                                            <button class="w-100 mt-2 btn btn-sm btn-danger delete-donation" data-id="<%= food._id %>">
                                                <i class="bi bi-trash me-1"></i> Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                <% } %>
            </div>

            <!-- Requests Tab -->
            <div class="tab-pane fade" id="requests" role="tabpanel">
                <h3 class="h4 mb-4">Food Requests</h3>

                <% if (requests.length === 0) { %>
                    <div class="empty-state">
                        <i class="bi bi-chat-left-text"></i>
                        <h4 class="h5">No Requests Yet</h4>
                        <p>You haven't made any food requests yet.</p>
                    </div>
                <% } else { %>
                    <div class="row row-cols-1 row-cols-md-2 g-4">
                        <% requests.forEach(request => { %>
                            <div class="col" id="request-<%= request._id %>">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <p class="card-text"><%= request.message %></p>
                                        <p class="text-muted small">
                                            <i class="bi bi-clock me-1"></i> <%= request.timeAgo %>
                                        </p>
                                    </div>
                                    <div class="card-footer bg-transparent text-end">
                                        <button class="btn btn-sm btn-outline-danger delete-request" data-id="<%= request._id %>">
                                            <i class="bi bi-trash me-1"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Edit Profile Modal -->
    <div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProfileModalLabel">Edit Profile</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form action="/users/update" method="POST" enctype="multipart/form-data" id="profileForm">
                        <input type="hidden" name="_method" value="PUT">

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="name" class="form-label">Full Name</label>
                                <input type="text" class="form-control" id="name" name="name" value="<%= user.name %>" required>
                                <div id="nameError" class="invalid-feedback"></div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" name="email" value="<%= user.email %>" required>
                                <div id="emailError" class="invalid-feedback"></div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="contact" class="form-label">Phone Number</label>
                                <input type="tel" class="form-control" id="contact" name="contact" value="<%= user.contact %>" required>
                                <div id="contactError" class="invalid-feedback"></div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="photo" class="form-label">Profile Picture</label>
                                <input type="file" class="form-control" id="photo" name="photo" accept="image/*">
                                <div id="photoError" class="invalid-feedback"></div>
                                <small class="text-muted">Leave blank to keep current photo</small>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="password" name="password" placeholder="Leave blank if not changing">
                            <div id="passwordValidationMessage" class="invalid-feedback"></div>
                            <small class="text-muted">Password must be at least 6 characters with one number and one special character</small>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-save me-1"></i> Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <%- include('config/footer')%>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Form Validation
        document.addEventListener("DOMContentLoaded", function() {
            const form = document.getElementById("profileForm");
            
            // Real-time validation
            document.getElementById("name").addEventListener("input", validateName);
            document.getElementById("email").addEventListener("input", validateEmail);
            document.getElementById("contact").addEventListener("input", validateContact);
            document.getElementById("photo").addEventListener("change", validatePhoto);
            document.getElementById("password").addEventListener("input", validatePassword);
            
            // Form submission validation
            form.addEventListener("submit", function(event) {
                if (!validateName() || !validateEmail() || !validateContact() || !validatePhoto() || !validatePassword()) {
                    event.preventDefault();
                }
            });
            
            function validateName() {
                const name = document.getElementById("name").value.trim();
                const errorElement = document.getElementById("nameError");
                
                if (name === "") {
                    showError("name", "Name is required");
                    return false;
                } else {
                    clearError("name");
                    return true;
                }
            }
            
            function validateEmail() {
                const email = document.getElementById("email").value.trim();
                const errorElement = document.getElementById("emailError");
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                
                if (email === "") {
                    showError("email", "Email is required");
                    return false;
                } else if (!emailRegex.test(email)) {
                    showError("email", "Please enter a valid email");
                    return false;
                } else {
                    clearError("email");
                    return true;
                }
            }
            
            function validateContact() {
                const contact = document.getElementById("contact").value.trim();
                const errorElement = document.getElementById("contactError");
                const phoneRegex = /^\d{10,15}$/;
                
                if (contact === "") {
                    showError("contact", "Phone number is required");
                    return false;
                } else if (!phoneRegex.test(contact)) {
                    showError("contact", "Please enter a valid phone number");
                    return false;
                } else {
                    clearError("contact");
                    return true;
                }
            }
            
            function validatePhoto() {
                const photoInput = document.getElementById("photo");
                const errorElement = document.getElementById("photoError");
                
                if (photoInput.files.length > 0) {
                    const file = photoInput.files[0];
                    const validTypes = ["image/jpeg", "image/png", "image/gif"];
                    
                    if (!validTypes.includes(file.type)) {
                        showError("photo", "Please upload a valid image (JPEG, PNG, GIF)");
                        return false;
                    } else if (file.size > 2 * 1024 * 1024) { // 2MB
                        showError("photo", "Image must be less than 2MB");
                        return false;
                    } else {
                        clearError("photo");
                        return true;
                    }
                }
                return true;
            }
            
            function validatePassword() {
                const password = document.getElementById("password").value;
                const errorElement = document.getElementById("passwordValidationMessage");
                
                if (password === "") {
                    clearError("password");
                    return true;
                }
                
                const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,}$/;
                
                if (!passwordRegex.test(password)) {
                    showError("password", "Password must be at least 6 characters with one number and one special character");
                    return false;
                } else {
                    clearError("password");
                    return true;
                }
            }
            
            function showError(fieldId, message) {
                const field = document.getElementById(fieldId);
                const errorElement = document.getElementById(fieldId + "Error");
                
                field.classList.add("is-invalid");
                errorElement.textContent = message;
            }
            
            function clearError(fieldId) {
                const field = document.getElementById(fieldId);
                const errorElement = document.getElementById(fieldId + "Error");
                
                field.classList.remove("is-invalid");
                errorElement.textContent = "";
            }
            
            // Delete donation functionality
            document.querySelectorAll(".delete-donation").forEach(btn => {
                btn.addEventListener("click", async () => {
                    const foodId = btn.dataset.id;
                    
                    if (confirm("Are you sure you want to delete this donation? This action cannot be undone.")) {
                        try {
                            const response = await fetch(`/users/donation/${foodId}`, {
                                method: "DELETE",
                                headers: {
                                    "Content-Type": "application/json"
                                }
                            });
                            
                            if (response.ok) {
                                // Remove the card from the UI
                                const card = btn.closest(".food-card");
                                if (card) card.remove();
                                
                                // Show success message
                                alert("Donation deleted successfully");
                            } else {
                                alert("Failed to delete donation. Please try again.");
                            }
                        } catch (error) {
                            console.error("Error deleting donation:", error);
                            alert("An error occurred while deleting the donation.");
                        }
                    }
                });
            });
            
            // Confirm pickup functionality
            document.querySelectorAll(".confirm-pickup").forEach(btn => {
                btn.addEventListener("click", async () => {
                    const foodId = btn.dataset.id;
                    
                    if (confirm("Confirm that the food has been picked up?")) {
                        try {
                            const response = await fetch("/users/confirmPickup", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({ foodId })
                            });
                            
                            const result = await response.json();
                            
                            if (result.success) {
                                // Remove the card from the UI or update its status
                                const card = btn.closest(".food-card");
                                if (card) card.remove();
                                
                                alert("Pickup confirmed successfully!");
                            } else {
                                alert(result.message || "Failed to confirm pickup.");
                            }
                        } catch (error) {
                            console.error("Error confirming pickup:", error);
                            alert("An error occurred while confirming pickup.");
                        }
                    }
                });
            });
            
            // Delete request functionality
            document.querySelectorAll(".delete-request").forEach(btn => {
                btn.addEventListener("click", async () => {
                    const requestId = btn.dataset.id;
                    
                    if (confirm("Are you sure you want to delete this request?")) {
                        try {
                            const response = await fetch(`/request/delete/${requestId}`, {
                                method: "DELETE",
                                headers: {
                                    "Content-Type": "application/json"
                                }
                            });
                            
                            if (response.ok) {
                                // Remove the request from the UI
                                const requestElement = document.getElementById(`request-${requestId}`);
                                if (requestElement) requestElement.remove();
                                
                                // Show success message
                                alert("Request deleted successfully");
                            } else {
                                alert("Failed to delete request. Please try again.");
                            }
                        } catch (error) {
                            console.error("Error deleting request:", error);
                            alert("An error occurred while deleting the request.");
                        }
                    }
                });
            });
            
            // Search functionality
            function setupSearch(inputId, cardSelector) {
                const searchInput = document.getElementById(inputId);
                if (searchInput) {
                    searchInput.addEventListener("input", function() {
                        const searchTerm = this.value.toLowerCase();
                        const cards = document.querySelectorAll(cardSelector);
                        
                        cards.forEach(card => {
                            const name = card.getAttribute("data-name") || "";
                            const token = card.getAttribute("data-token") || "";
                            
                            if (name.includes(searchTerm) || token.includes(searchTerm)) {
                                card.style.display = "block";
                            } else {
                                card.style.display = "none";
                            }
                        });
                    });
                }
            }
            
            setupSearch("searchClaimed", "#claimed .food-card");
            setupSearch("searchDonated", "#donated .food-card");
        });
    </script>
</body>

</html>